import { useState } from 'react';
import Icon from "components/Icon/Icon";
import { Container, Row, Col } from "styled-bootstrap-grid";
import { GlassIconButton } from 'UI/Button/GlassButton';

import styled from 'styled-components';
import { Text, H4, H1, H2  } from "UI/Typography/Typography";
import { motion } from "framer-motion";
import { variants, transition } from "utils/motionVariants";
import { useSlideAnimationControls } from "hooks/useAnimationControls";
import { Box, WhiteBox, ColoredTextOnHover } from 'UI/Box/Box';
import { RoundedImageContainer } from 'UI/ImageContainer/RoundedImage'
import { RoundedImage } from 'UI/Image/Image'
import { GlassCard } from 'UI/Card/Card'
import Image from 'next/image';

const summaryVariables = [
    'Son cajas con un identificador que nos permiten guardar objetos como: n칰meros, texto, booleanos, etc (o, t칠cnicamente hablando, una locaci칩n con nombre que nos permite almacenar informaci칩n en memoria RAM)',
    'El identificador de una variable deber칤a de ser una combinaci칩n de letras en min칰scula (de la "a" a la "z") o en may칰scula (de la "A" a la "Z") o n칰meros (del 0 al 9) o un gu칤on bajo (_). Por ejemplo: snake_case, SNAKE_CASE, numero1, variable2',
    'Crear variables con nombres que tengan sentido. Por ejemplo: "numero" tiene mucho m치s sentido que "n"',
    'Si quieres crear una variable con dos palabras, usar un gui칩n bajo para separarlas (_). Por ejemplo: mi_nombre',
    'Nunca usar simbolos o caracteres especiales (!, @, #, $, %, 치, 칖, etc)',
    'Nunca empezar nombres de variables con un n칰mero'
]

const summaryDatatypes = [
    'N칰meros naturales',
    'N칰meros de punto flotante (o decimales)',
    'Strings (o cadenas de texto)',
    'Booleanos (True or False)',
]

const summaryConversion = [
    'Usando int() puedes convertir un tipo de dato compatible a n칰mero entero',
    'Usando float() puedes converitr un tipo de dato compatible a un n칰mero decimal',
    'Usando str() puedes convertir un tipo de dato compatible a una cadena de caracteres',
    'Usando bool() puedes convertir un tipo de dato compatible a un booleano',
]

const items = [
    {
        title: 'Variables',
        Component: () => (
            <GlassCardContent>
                <motion.h2 initial='hidden' animate='visible' variants={variants} exit='exits' custom={1} transition={transition}>
                    Variables
                </motion.h2>
                <motion.ul initial='hidden' animate='visible' variants={variants} exit='exits' custom={2} transition={transition}>
                    {summaryVariables.map((item, index) => 
                        <motion.li className='small' key={index} initial='hidden' animate='visible' variants={variants} exit='exits' custom={3 + index} transition={transition}>
                            {item}
                        </motion.li>
                    )}
                </motion.ul>
            </GlassCardContent>
        )
    },
    {
        title: 'Tipos de datos',
        Component: () => (
            <GlassCardContent>
                <motion.h2 initial='hidden' animate='visible' variants={variants} exit='exits' custom={1} transition={transition}>
                    Tipos de datos
                </motion.h2>
                <motion.ul initial='hidden' animate='visible' variants={variants} exit='exits' custom={2} transition={transition}>
                    {summaryDatatypes.map((item, index) => 
                        <motion.li key={index} initial='hidden' animate='visible' variants={variants} exit='exits' custom={3 + index} transition={transition}>
                            {item}
                        </motion.li>
                    )}
                </motion.ul>
            </GlassCardContent>
        )
    },
    {
        title: 'Conversi칩n de datos a otros tipos',
        Component: () => (
            <GlassCardContent>
                <motion.h2 initial='hidden' animate='visible' variants={variants} exit='exits' custom={1} transition={transition}>
                    Conversi칩n de datos a otros tipos
                </motion.h2>
                <motion.ul initial='hidden' animate='visible' variants={variants} exit='exits' custom={2} transition={transition}>
                    {summaryConversion.map((item, index) => 
                        <motion.li key={index} initial='hidden' animate='visible' variants={variants} exit='exits' custom={3 + index} transition={transition}>
                            {item}
                        </motion.li>
                    )}
                </motion.ul>
            </GlassCardContent>
        )
    },
    // {
    //     title: 'Preparadur칤as',
    //     Component: () => (
    //         <GlassCardContent>
    //             <motion.h2 initial='hidden' animate='visible' variants={variants} exit='exits' custom={1} transition={transition}>
    //                 Preparadur칤as
    //             </motion.h2>
    //             <motion.p initial='hidden' animate='visible' variants={variants} exit='exits' custom={2} transition={transition}>
    //                 Hay 4 preparadores. Hay dos horarios para las prepas: viernes y s치bado de 12 a 2
    //             </motion.p>
    //         </GlassCardContent>
    //     )
    // },
]

const Class4Slide7 = () =>{
    const controls = useSlideAnimationControls();
    const [itemSelected, setItemSelected] = useState(null);
    return (
        <Container >
            <Row>
                <Col>
                    <motion.div  initial='hidden' animate={controls} variants={variants} custom={0} transition={transition}>
                        <H1 shadow fontSize={'3rem'}>
                            En resumen...
                        </H1>
                    </motion.div>
                </Col>
                <Col col={6}>
                    {items.map((item, index) => 
                        <motion.div initial='hidden' animate={controls} variants={variants} custom={index + 2} transition={transition}>
                            <WhiteBox tabIndex={ 0 } className={item === itemSelected ? 'selected' : ''} onClick={() => setItemSelected(item)} >
                                {/* onBlur={() => item === itemSelected ? setItemSelected(null) : ''} */}
                                <ColoredTextOnHover p={3}>
                                        {`${index + 1}. ${item.title}`}
                                </ColoredTextOnHover>
                            </WhiteBox>
                        </motion.div>
                    )}
                </Col>
                <Col col={6}>
                    <Box pt={3}>
                        {itemSelected &&
                        <motion.div initial='hidden' animate='visible' variants={variants} exit='exits' custom={1} transition={transition}>
                            <GlassCard>
                                <itemSelected.Component/>
                            </GlassCard>
                        </motion.div>}
                    </Box>
                </Col>
            </Row>

        </Container>
    )
}


const GlassCardContent = styled.div`
    // overflow: auto;
    max-height: 400px;
    padding: 1rem;
    h2 {
        text-align: center;
    }

    ul {

        list-style: '游녤  ';

        li {
            margin: .5rem auto;
            font-weight: bold;
            font-size: 1.25rem;

            &.small {
                font-size: .8rem;
            }
        }
    }

`



export default Class4Slide7;